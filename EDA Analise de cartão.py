# -*- coding: utf-8 -*-
"""Euro Logisticis EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RBLBmj_c_fDoAb-1EVeKiCrC_P2QMCwn

<h1 style="font-size: 48px;">Analise de Dados (EDA) </h1>

### Olá este é o meu primeiro projeto de anlise de dados.

Neste notebook estarei organizando meus estudos e criando um roteiro para a analise de dados de um conjunto do kanggle.
Este é o link dos dados: https://www.kaggle.com/datasets/dt2001216212/credit-card-card3

1. **Variáveis Numéricas**:
   - `LIMIT_BAL`: Variável numérica contínua que representa o limite de crédito.
   - `AGE`: Variável numérica contínua que representa a idade do indivíduo.
   - `PAY_AMT1`, `PAY_AMT2`, `PAY_AMT3`, `PAY_AMT4`, `PAY_AMT5`, `PAY_AMT6`: Variáveis numéricas contínuas que representam o valor pago em cada mês.
   - `BILL_AMT1`, `BILL_AMT2`, `BILL_AMT3`, `BILL_AMT4`, `BILL_AMT5`, `BILL_AMT6`: Variáveis numéricas contínuas que representam o valor da fatura de cada mês.

2. **Variáveis Categóricas**:
   - `SEX`: Variável categórica (por exemplo, Masculino, Feminino).
   - `EDUCATION`: Variável categórica que representa o nível de educação (por exemplo, Pós-graduação, Universidade, Ensino Médio, Outros).
   - `MARRIAGE`: Variável categórica que representa o estado civil (por exemplo, Casado, Solteiro, Outros).
   - `PAY_1`, `PAY_2`, `PAY_3`, `PAY_4`, `PAY_5`, `PAY_6`: Variáveis categóricas ordinais que representam o status de pagamento (por exemplo, -1 = pagamento em dia, 1 = atraso de pagamento por um mês, etc.).
   - `default payment next month`: Variável categórica binária que indica se o pagamento foi inadimplente (1 = sim, 0 = não).

3. **Variáveis Dummy**:
   - `EDUCATION_CAT`: Variável categórica que pode representar categorias de educação em formato binário.
   - `graduate school`, `high school`, `others`, `university`: Variáveis dummy que indicam a presença de cada categoria de educação.
   - `graduate school.1`, `high school.1`, `others.1`, `university.1`: Variáveis dummy adicionais, possivelmente indicando uma categorização ou codificação diferente.
grícola e das operações da cadeia de suprimentos.

<h1 style="font-size: 48px;">Estudo de Caso</h1>

### Passos para o processamento de dados
- **Etapa:1** - Importar as bibiotecas nescessarias
- **Etapa:2** - Leitura do Dataset Dataset
- **Etapa:3** - 'Check Sanity' dos dados
- **Etapa:4** - Exploratory Data Analysis (EDA)
- **Etapa:5** - Tratamento de dados NUlos
- **Etapa:6** - Tratamento de outliers
- **Etapa:7** - Conclusão da Analise

<h1 style="font-size: 48px;">Etapa:1 - Importar as bibliotecas nescessariasa </h1>
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

#biblioteca para excluir os aviso dos graficos
import warnings
warnings.filterwarnings('ignore')







"""
<h1 style="font-size: 48px;">Etapa:2 - Leitura do Dataset </h1>"""

#Carregar o dataset
dados = "credit_card_clean_3.csv"

df = pd.read_csv(dados)

#head()
df.head()

#tail()
df.tail()

"""
<h1 style="font-size: 48px;">Etapa:3 - Sanidade dos dados </h1>"""

#shape()
df.shape

#info()
df.info()

#Encontrando arquivos nulos
df[df.isnull().any(axis=1)]

#encontrar dados duplicados
df.duplicated().sum()

#encontra valores "garbage"
for i in df.select_dtypes(include="object").columns:
    print(df[i].value_counts())
    print("***"*10)

"""
<h1 style="font-size: 48px;">Etapa:4 - Exploratory Data Analysis (EDA) </h1>"""

df.drop( ['EDUCATION_CAT','university','graduate school.1', 'high school.1', 'others.1', 'university.1'],axis = 1, inplace=True)

"""Optei retirar as colunas para uma analise preditiva por imquanto apenas para reduzir memória."""

# transforme as colunas PAY_1 em true se for menor que 0 e false para maior que 0
df_copy = df.copy()

mes = ['PAY_1','PAY_2','PAY_3','PAY_4','PAY_5','PAY_6']
for i in mes:
  #neste trecho ira definir para 'conta não paga' como False e 'em dia' ou pago em True
  df_copy[i] = df_copy[i].apply(lambda x: False if x < 0 else True)

df_copy.head()

df_copy.columns

#statisticas dos valores
df_copy.describe().T

for i in mes:
  sns.set_theme(style="darkgrid")
  sns.boxplot(data=df, x=i, y='LIMIT_BAL')
  plt.title(f'Boxplot da coluna {i}')
  plt.show()

"""# 1º Analise - Boxplot

Conseguimos ver algumas observação:

- 1 Concentração maior de faturas atrasadas nos clientes com limite ate 300.000;
- 2 Aumento de faturas atrasadas;
- 3 Vemos uma pequena diminuição nas faturas;
"""

colunas_PAY_bolean = df_copy[['PAY_1', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']]

for i in colunas_PAY_bolean:
  sns.set_theme(style="dark")
  plt.figure(figsize=(10,8))
  sns.violinplot(data=df_copy, x= i, y='LIMIT_BAL', hue='SEX')
  plt.show()

"""# 2º Analise

POdemos serguir com a analise para 4 viés:

- **1** Para faturas sem atrasos o grafico parece ser mais distribuido em valores intermediários.
- **2** podemos ver que adistribuição de faturas atrasadas esta mais dispersa entre limites
- **3** outra analise que podemos ver que provavelmente existe uma regra de negocio para clientes, impondo limites de no maximo 2 faturas atrasadas, e podemos ver faixas de uma especie de classificação de cliente com limites de 200.000 maior, uma concentração de  200.000 á 550.000 e um exclusiva de 550.000 á 800.000.
- **4** Existe uma distribuição normal entre sexos, teriamos que analisar melhor sobre o valo'0' apenas.
"""

for i in colunas_PAY_bolean:
      plt.figure(figsize=(8,6))
      sns.countplot(data=df_copy, x=i, hue='default payment next month')
      plt.xlabel(i)
      plt.ylabel('Count')
      plt.show()

"""# 3º Analise
Podemos identificar que existe realmente um aumento no ultimo mes de faturas atradas;
outra observação que seria interessante implementar uma previsão de para inadiplencia para quem esta em dia, devido que a coluna laranja acredito ser maior para quem esta em dia do para quem esta atrasado

"""

colunas_BILL_AMT = ['BILL_AMT1', 'BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6']
colunas_PAY_AMT = ['PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6']

df.columns

for i in colunas_BILL_AMT:
    plt.figure(figsize=(10,8))
    sns.scatterplot(data=df, y=i, x='LIMIT_BAL', hue='EDUCATION')
    plt.show()

for i in colunas_PAY_AMT:
    plt.figure(figsize=(10,8))
    sns.scatterplot(data=df, y=i, x='LIMIT_BAL')
    plt.show()

"""# 5º Analise

Com os dois graficos acima podemos identificar alguns novos pontos:

- **1** Podemos perceber que os graficos de relação com o valor gasto é muito mais acentado para cima nos indicando gastos maiores conseguindo atravessar a linhas dos limites maiores de 800.000;

- **2** teriamos que analisar aqueles valores negativos para ver mais afundo o que seria um valore negativo em gastos;

- **3** Vimos que grande parte dos valores pagos não ultrapassam os 500.000, onde nos diz que pode haver parcelamentos de compras, precisariamos apenas ver melhor os outlier.


"""

#agora vamos visualizar a correlação entre a colunas numericas
c = df.select_dtypes(include="number").corr(method='spearman')

#usando o heat map para uma melhor visualização
plt.figure(figsize=(25,25))
sns.heatmap(data=c, annot=True, cmap="viridis")

"""# 6º Analise

Na correlação, de uma forma mais visual, conseguimos identificar a movimentação de maiores valores nos gastos seguidos por pagos onde nos confirma a nossa analise 5.

<h1 style="font-size: 48px;">Etapa:5 - Tratamento de dados NUlos </h1>
"""



"""
<h1 style="font-size: 48px;">Etapa:6 - Tratamento de outliers </h1>"""

